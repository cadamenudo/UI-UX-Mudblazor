<style>

    body {
    font-family: 'Greycliff CF', sans-serif;
    margin: 0;
    background: #FAFBFF;
    color: #000000;
    padding-bottom: 80px;
  }

  .mud-typography-h5 {
    font-family: 'Greycliff CF', sans-serif;
    font-weight: 500;
    font-size: 1.5rem;
    color: #0f172a;
}
.mud-expand-panel-header .mud-expand-panel-text {
    font-family: 'Greycliff CF', sans-serif;
    font-weight: 550; /* semibold */
    font-size: 1.1rem;
    color: #0f172a;
}
.mud-switch-checked.mud-switch-primary {
  --mud-palette-primary: #594AE2;
}

    .titulo-exp {
        font-family: 'Greycliff CF', sans-serif;
        font-size: 1.25rem;
        font-weight: 700;
        color: #0f172a;
    }

.mud-expand-panel {
    border-radius: 20px !important; /* ðŸ”’ fuerza los 4 bordes */
    overflow: hidden;
}

    .categoria-panel {
        background: #ffffff;
        border-radius: 20px;
        box-shadow: 0 1px 5px rgba(0, 0, 0, 0.05);
        margin: 0 auto 1.5rem;
        max-width: 700px;
    }

.categoria-bloque {
    background-color: #ffffff;
    border-radius: 16px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
}
    .categoria-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 600;
        font-size: 1rem;
        padding: 1rem 1rem 0.5rem;
        cursor: pointer;
    }
.categoria-header.activa {
  background-color: #EEF0FF;
  color: #000;
}

.categoria-header.inactiva {
  background-color: #F5F5F5;
  color: #999;
}

.subcategoria-item.activa {
  opacity: 1;
}

.subcategoria-item.inactiva {
  opacity: 0.5;
}

.subcategoria-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.25rem 1rem 0.25rem 2rem;
    margin-bottom: 0.5rem;
}

    .subcategoria-item .nombre {
        flex-grow: 1;
        font-size: 1rem;
        color: #0f172a;
    }

    .subcategoria-item .recurrencia {
        margin-left: 0.25rem;
    }

    .subcategoria-item .switch {
        margin-left: auto;
    }

.btn-nueva {
    margin: 0.5rem 1.5rem 1rem auto;
    border-radius: 12px;
    min-width: 90px;
    font-size: 1rem;
    font-weight: 500;
    background-color: #594AE2;
    color: white;
    padding: 0.3rem 1rem;
    text-transform: none;  
    box-shadow: none;
    transition: none;
}

.btn-nueva:hover {
    background-color: #594AE2;
    color: white;
    box-shadow: none;
    filter: none;
}

    .wrapper-boton-nueva {
        display: flex;
        justify-content: flex-end;
        padding-right: 0 0.5rem 1rem 2rem;
    }

.mud-button span {
    font-size: 0.85rem;
}
    @@media (max-width: 600px) {
        .subcategoria-item {
            padding-left: 2rem;
        }
    }
</style>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudText Typo="Typo.h5" Class="mb-4">Lista de CategorÃ­as</MudText>

    <MudExpansionPanels Elevation="0" Rounded="false" Class="pa-0">
        @foreach (var grupo in Categorias)
        {
            <MudExpansionPanel Class="categoria-panel"
                               Elevation="0"
                               Rounded="true"
                               Text="@grupo.Nombre">
                @foreach (var categoria in grupo.Items)
                {
                    <MudPaper Class="categoria-bloque">

                        <div class="categoria-header" @onclick="@(() => ToggleCategoria(categoria, grupo))">
                            @categoria.Nombre
                            <MudSwitch T="bool" @bind-Checked="categoria.Activo" Color="Color.Primary" />
                        </div>

                        @if (categoria.Expandida)
                        {
                            <MudDivider Class="mx-4 mb-2" />

                            @foreach (var sub in categoria.Subcategorias)
                            {
                                <div class="subcategoria-item">
                                    <span>@sub.Nombre</span>
                                    <MudSwitch T="bool" @bind-Checked="sub.Activo" Color="Color.Primary" />
                                </div>
                            }

                            <div class="wrapper-boton-nueva">
                                <MudButton Class="btn-nueva"
                                           Variant="Variant.Filled"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           OnClick="@(() => AbrirModal(categoria))">
                                    nueva
                                </MudButton>
                            </div>
                        }
                    </MudPaper>
                }

                @if (grupo.Nombre != "Ingresos")
                {
                    if (mostrandoInputNuevaCategoria && grupoEditando == grupo)
                    {
                        <div class="d-flex gap-2 mt-2 ms-4">
                            <MudTextField T="string"
                                          @bind-Value="nuevoNombreCategoria"
                                          Placeholder="Nueva categorÃ­a"
                                          Immediate="true"
                                          Style="max-width: 250px;" />
                            <MudIconButton Icon="@Icons.Material.Filled.Check"
                                           Color="Color.Primary"
                                           OnClick="AgregarCategoria" />
                            <MudIconButton Icon="@Icons.Material.Filled.Close"
                                           Color="Color.Default"
                                           OnClick="CancelarNuevaCategoria" />
                        </div>
                    }
                    else
                    {
                    <div class="d-flex justify-end mt-2 me-4">
                        <MudButton StartIcon="@Icons.Material.Filled.Add"
                                Variant="Variant.Filled"
                                Style="background-color:#594AE2; color:white; text-transform: none; border-radius: 12px; padding: 0.4rem 1rem;"
                                OnClick="@(() => MostrarInputNuevaCategoria(grupo))">
                            categoria
                        </MudButton>
                    </div>
                    }
                }
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudContainer>

<MudDialog @bind-IsVisible="_modalAbierto">
    <MudForm @ref="_formRef">
        <div class="pa-4">
            <MudText Typo="Typo.h6">Nueva SubcategorÃ­a</MudText>

            <MudTextField Label="Nombre" @bind-Value="_form.Nombre" Required="true" RequiredError="El nombre es obligatorio" />

            <MudSelect T="string" Label="Recurrencia" @bind-Value="_form.Recurrencia">
                <MudSelectItem T="string" Value="@("ninguna")">Ninguna</MudSelectItem>
                <MudSelectItem T="string" Value="@("diario")">Diario</MudSelectItem>
                <MudSelectItem T="string" Value="@("semanal")">Semanal</MudSelectItem>
                <MudSelectItem T="string" Value="@("quincenal")">Quincenal</MudSelectItem>
                <MudSelectItem T="string" Value="@("mensual")">Mensual</MudSelectItem>
                <MudSelectItem T="string" Value="@("anual")">Anual</MudSelectItem>
            </MudSelect>

            @if (!string.IsNullOrEmpty(_form.Recurrencia) && _form.Recurrencia != "ninguna")
            {
                <MudTextField Label="Monto"
                              @bind-Value="_form.MontoDecimal"
                              Required="true"
                              RequiredError="El monto es obligatorio si hay recurrencia"
                              Immediate="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
            }

            <MudTextField Label="DescripciÃ³n" @bind-Value="_form.Descripcion" />
        </div>

        <div class="d-flex justify-end pa-4 gap-2">
            <MudButton OnClick="CancelarModal" Color="Color.Secondary" Variant="Variant.Text">Cancelar</MudButton>
            <MudButton OnClick="GuardarSubcategoria" Color="Color.Primary" Variant="Variant.Filled">Guardar</MudButton>
        </div>
    </MudForm>
</MudDialog>


@code {

    class Subcategoria
    {
        public string Nombre { get; set; }
        public string Recurrencia { get; set; }
        public decimal? MontoDecimal { get; set; }
        public string Descripcion { get; set; }
        public bool Activo { get; set; } = true;
        public bool Editando { get; set; } = false;
    }

    class Categoria
    {
        public string Nombre { get; set; }
        public bool Activo { get; set; } = true;
        public bool Expandida { get; set; } = false;
        public List<Subcategoria> Subcategorias { get; set; } = new();
    }

    class GrupoCategoria
    {
        public string Nombre { get; set; }
        public List<Categoria> Items { get; set; } = new();
    }

    List<GrupoCategoria> Categorias = new()
    {
        new GrupoCategoria
        {
            Nombre = "Ingresos",
            Items = new()
            {
                new Categoria { Nombre = "Pago por trabajo", Subcategorias = new() {
                    new Subcategoria { Nombre = "Bono" },
                    new Subcategoria { Nombre = "ComisiÃ³n" },
                    new Subcategoria { Nombre = "Negocio propio" },
                    new Subcategoria { Nombre = "Pago por hora" },
                    new Subcategoria { Nombre = "Propina" },
                    new Subcategoria { Nombre = "Salario" }
                }},
                new Categoria { Nombre = "Ganancia de capital", Subcategorias = new() {
                    new Subcategoria { Nombre = "Acciones" },
                    new Subcategoria { Nombre = "Auto" },
                    new Subcategoria { Nombre = "Bonos o renta fija" },
                    new Subcategoria { Nombre = "Casaãƒ»Apartamentoãƒ»Tierra" },
                    new Subcategoria { Nombre = "ETF, fondo mutuo, etc." }
                }},
                new Categoria { Nombre = "Ingreso pasivo", Subcategorias = new() {
                    new Subcategoria { Nombre = "Anualidad" },
                    new Subcategoria { Nombre = "Dividendos e Intereses" },
                    new Subcategoria { Nombre = "PensiÃ³n" },
                    new Subcategoria { Nombre = "Renta inmueble" },
                    new Subcategoria { Nombre = "Seguro Social" }
                }}
            }
        },

        new GrupoCategoria
        {
            Nombre = "Gastos",
            Items = new()
            {
                new Categoria { Nombre = "AlimentaciÃ³n", Subcategorias = new() {
                    new Subcategoria { Nombre = "Supermercado" },
                    new Subcategoria { Nombre = "Comidas fuera" },
                    new Subcategoria { Nombre = "Pedido a domicilio" }
                }},
                new Categoria { Nombre = "Casa", Subcategorias = new() {
                    new Subcategoria { Nombre = "Hipoteca / Alquiler" },
                    new Subcategoria { Nombre = "Servicios bÃ¡sicos" },
                    new Subcategoria { Nombre = "Mantenimiento" }
                }},
                new Categoria { Nombre = "Impuestos", Subcategorias = new() {
                    new Subcategoria { Nombre = "Seguro social" },
                    new Subcategoria { Nombre = "Propiedad" },
                    new Subcategoria { Nombre = "Venta" },
                    new Subcategoria { Nombre = "Estatales" },
                    new Subcategoria { Nombre = "Federales" },
                    new Subcategoria { Nombre = "Municipales" }
                }},
                new Categoria { Nombre = "TransportaciÃ³n", Subcategorias = new() {
                    new Subcategoria { Nombre = "Gasolina" },
                    new Subcategoria { Nombre = "Mantenimiento" },
                    new Subcategoria { Nombre = "Transporte pÃºblico / Uber" }
                }},
                new Categoria { Nombre = "Seguros", Subcategorias = new() {
                    new Subcategoria { Nombre = "Salud" },
                    new Subcategoria { Nombre = "Auto" },
                    new Subcategoria { Nombre = "Vida" }
                }},
                new Categoria { Nombre = "Regalos y donaciones", Subcategorias = new() {
                    new Subcategoria { Nombre = "Familia" },
                    new Subcategoria { Nombre = "Amigos" },
                    new Subcategoria { Nombre = "Instituciones" }
                }},
                new Categoria { Nombre = "Gastos MÃ©dicos", Subcategorias = new() {
                    new Subcategoria { Nombre = "Consultas" },
                    new Subcategoria { Nombre = "Medicamentos" },
                    new Subcategoria { Nombre = "Procedimientos" }
                }},
                new Categoria { Nombre = "Cuidado Personal", Subcategorias = new() {
                    new Subcategoria { Nombre = "PeluquerÃ­a" },
                    new Subcategoria { Nombre = "CosmÃ©ticos" },
                    new Subcategoria { Nombre = "Spa / BarberÃ­a" }
                }},
                new Categoria { Nombre = "Dependientes", Subcategorias = new() {
                    new Subcategoria { Nombre = "Cuidado de niÃ±os" },
                    new Subcategoria { Nombre = "Cuidado de mayores" },
                    new Subcategoria { Nombre = "EducaciÃ³n" }
                }},
                new Categoria { Nombre = "Deuda", Subcategorias = new() {
                    new Subcategoria { Nombre = "Tarjetas de crÃ©dito" },
                    new Subcategoria { Nombre = "PrÃ©stamos estudiantiles" },
                    new Subcategoria { Nombre = "Otros prÃ©stamos" }
                }},
                new Categoria { Nombre = "Entretenimiento", Subcategorias = new() {
                    new Subcategoria { Nombre = "Cine" },
                    new Subcategoria { Nombre = "Conciertos" },
                    new Subcategoria { Nombre = "Streaming" }
                }},
                new Categoria { Nombre = "Telecomunicaciones", Subcategorias = new() {
                    new Subcategoria { Nombre = "TelÃ©fono" },
                    new Subcategoria { Nombre = "Internet" },
                    new Subcategoria { Nombre = "TV" }
                }}
            }
        },

        new GrupoCategoria
        {
            Nombre = "Ahorro",
            Items = new()
            {
                new Categoria { Nombre = "Emergencia", Subcategorias = new() {
                    new Subcategoria { Nombre = "Fondo corto plazo" },
                    new Subcategoria { Nombre = "Fondo largo plazo" },
                    new Subcategoria { Nombre = "Reserva mÃ©dica" }
                }},
                new Categoria { Nombre = "Meta especÃ­fica", Subcategorias = new() {
                    new Subcategoria { Nombre = "Vacaciones" },
                    new Subcategoria { Nombre = "Auto" },
                    new Subcategoria { Nombre = "Casa" },
                    new Subcategoria { Nombre = "Boda" },
                    new Subcategoria { Nombre = "EducaciÃ³n de hijos" }
                }},
                new Categoria { Nombre = "InversiÃ³n", Subcategorias = new() {
                    new Subcategoria { Nombre = "Cuenta brokerage" },
                    new Subcategoria { Nombre = "Fondo indexado" },
                    new Subcategoria { Nombre = "Cripto" },
                    new Subcategoria { Nombre = "Crowdfunding" }
                }},
                new Categoria { Nombre = "Retiro", Subcategorias = new() {
                    new Subcategoria { Nombre = "IRA / Roth IRA" },
                    new Subcategoria { Nombre = "401(k)" },
                    new Subcategoria { Nombre = "PensiÃ³n privada" }
                }},
                new Categoria { Nombre = "Ahorro personal", Subcategorias = new() {
                    new Subcategoria { Nombre = "Ahorro mensual" },
                    new Subcategoria { Nombre = "Ahorro en efectivo" },
                    new Subcategoria { Nombre = "Cuenta de ahorro tradicional" }
                }},
                new Categoria { Nombre = "Ahorro para hijos", Subcategorias = new() {
                    new Subcategoria { Nombre = "EducaciÃ³n" },
                    new Subcategoria { Nombre = "Regalos futuros" },
                    new Subcategoria { Nombre = "Fondo universitario" }
                }},
                new Categoria { Nombre = "Otros", Subcategorias = new() {
                    new Subcategoria { Nombre = "Donaciones planificadas" },
                    new Subcategoria { Nombre = "Proyectos personales" },
                    new Subcategoria { Nombre = "Fondo de libertad financiera" }
                }}
            }
        }
    };

    bool _modalAbierto = false;
    Categoria _categoriaSeleccionada;
    Subcategoria _form = new();
    MudForm _formRef;

    void AbrirModal(Categoria categoria)
    {
        _categoriaSeleccionada = categoria;
        _form = new Subcategoria();
        _modalAbierto = true;
    }

    void CancelarModal()
    {
        _modalAbierto = false;
    }

    void ToggleCategoria(Categoria categoria, GrupoCategoria grupo)
    {
        foreach (var cat in grupo.Items)
        {
            if (cat != categoria)
                cat.Expandida = false;
        }

        categoria.Expandida = !categoria.Expandida;
    }

// Variables nuevas para creaciÃ³n de categorÃ­a
string nuevoNombreCategoria = "";
GrupoCategoria grupoEditando = null;
bool mostrandoInputNuevaCategoria = false;

// Mostrar input al presionar '+ nueva'
void MostrarInputNuevaCategoria(GrupoCategoria grupo)
{
    grupoEditando = grupo;
    mostrandoInputNuevaCategoria = true;
    nuevoNombreCategoria = "";
}

// Cancelar la acciÃ³n de crear categorÃ­a
void CancelarNuevaCategoria()
{
    mostrandoInputNuevaCategoria = false;
    grupoEditando = null;
    nuevoNombreCategoria = "";
}

// Guardar nueva categorÃ­a
void AgregarCategoria()
{
    if (!string.IsNullOrWhiteSpace(nuevoNombreCategoria) && grupoEditando != null)
    {
        grupoEditando.Items.Add(new Categoria
        {
            Nombre = nuevoNombreCategoria,
            Subcategorias = new List<Subcategoria>(),
            Expandida = false
        });
    }

    mostrandoInputNuevaCategoria = false;
    grupoEditando = null;
    nuevoNombreCategoria = "";
}

    async void GuardarSubcategoria()
    {
        await _formRef.Validate();

        if (!_formRef.IsValid || (!string.IsNullOrEmpty(_form.Recurrencia) && !_form.MontoDecimal.HasValue))
            return;

        _categoriaSeleccionada.Subcategorias.Add(new Subcategoria
        {
            Nombre = _form.Nombre,
            Recurrencia = _form.Recurrencia,
            MontoDecimal = _form.MontoDecimal,
            Descripcion = _form.Descripcion,
            Activo = true
        });

        _modalAbierto = false;
    }
    
}


