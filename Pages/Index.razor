@page "/"
@inject IDialogService DialogService
@using MudBlazor
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util

<MudThemeProvider />
<MudDialogProvider />

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudText Typo="Typo.h5" GutterBottom>Hola Xavier</MudText>

    <!-- ðŸ”¹ Resumen de Ingresos / Gastos / Ahorro -->
    <MudPaper Class="pa-4 my-2" Style="border-radius: 16px;">
        <MudGrid>
            @foreach (var item in Resumen)
            {
                <MudItem xs="4">
                    <MudStack Direction="Row" AlignItems="Center" Spacing="2">
                        <MudAvatar Image="@item.Icon" Size="Size.Medium" />
                        <MudStack>
                            <MudText Typo="Typo.caption">@item.Nombre</MudText>
                            <MudText Typo="Typo.subtitle2" Bold="true">@item.Valor</MudText>
                        </MudStack>
                    </MudStack>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>

    <!-- ðŸ”¹ SuperÃ¡vit -->
    <MudAlert Severity="Severity.Success" Dense="true" Class="my-2">
        âœ… SUPER: Tienes un sobrante de <strong>$@Superavit</strong>
    </MudAlert>

    <!-- ðŸ”¹ Selector de Fechas -->
    <MudGrid Class="my-3">
        <MudItem xs="6">
            <MudDatePicker Label="Desde" @bind-Date="FechaDesde" />
        </MudItem>
        <MudItem xs="6">
            <MudDatePicker Label="Hasta" @bind-Date="FechaHasta" />
        </MudItem>
    </MudGrid>

    <!-- ðŸ”¹ GrÃ¡ficos en Blazor puro -->
    <MudPaper Class="pa-4 my-4" Style="border-radius:16px;">
        <MudText Typo="Typo.h6" Align="Align.Center">Ingresos vs Gastos</MudText>
        <BarChart Config="@BarConfig" Style="height: 300px;" />
    </MudPaper>

    <MudPaper Class="pa-4 my-4" Style="border-radius:16px;">
        <MudText Typo="Typo.h6" Align="Align.Center">Ingresos Totales</MudText>
        <PieChart Config="@DonaIngresosConfig" Style="height: 300px;" />
    </MudPaper>
</MudContainer>

<footer class="navbar">
    <div class="nav-item">
        <img src="assets/icons/home.png" alt="Inicio" />
        <span>Tablero</span>
    </div>
    <div class="nav-item">
        <img src="assets/icons/transacciones.png" alt="Transacciones" />
        <span>Transacciones</span>
    </div>
    <div class="nav-item nav-item-nuevo">
        <div class="boton-registrar">
            <img src="assets/icons/nueva.png" alt="Registrar" />
        </div>
        <span>Registrar</span>
    </div>
    <div class="nav-item">
        <img src="assets/icons/metas.png" alt="Metas" />
        <span>Metas</span>
    </div>
    <div class="nav-item">
        <img src="assets/icons/buscar.png" alt="Buscar" />
        <span>Buscar</span>
    </div>
</footer>

<div class="footer-legales">
    <button @onclick="() => AbrirModal("TÃ©rminos", "terminos.html")">TÃ©rminos</button>
    <button @onclick="() => AbrirModal("PolÃ­tica de Privacidad", "privacidad.html")">PolÃ­tica de Privacidad</button>
    <a href="mailto:tech@cadamenudo.com">tech@cadamenudo.com</a>
</div>

@code {
    private DateTime FechaDesde = new(2025, 1, 1);
    private DateTime FechaHasta = new(2025, 5, 31);
    private string Superavit = "1,868.77";

    private List<(string Nombre, string Valor, string Icon)> Resumen = new()
    {
        ("Ingresos", "$6,000.00", "assets/icons/ingreso.png"),
        ("Gastos", "$3,531.23", "assets/icons/gastos.png"),
        ("Ahorros", "$600.00", "assets/icons/ahorro.png")
    };

    private BarConfig BarConfig;
    private PieConfig DonaIngresosConfig;

    protected override void OnInitialized()
    {
        BarConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = false }
            },
            Data = new BarData
            {
                Labels = new[] { "Enero", "Febrero", "Marzo", "Abril" },
                Datasets = new List<BarDataset<double>>
                {
                    new BarDataset<double>(new[] { 2000.0, 2200.0, 2500.0, 2100.0 })
                    {
                        Label = "Ingresos",
                        BackgroundColor = new[] { ColorUtil.ColorHexString(Colors.Blue.Default) }
                    },
                    new BarDataset<double>(new[] { 1200.0, 1500.0, 1400.0, 1600.0 })
                    {
                        Label = "Gastos",
                        BackgroundColor = new[] { ColorUtil.ColorHexString(Colors.Red.Default) }
                    }
                }
            }
        };

        DonaIngresosConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = false }
            },
            Data = new PieData
            {
                Labels = new[] { "Salario", "Freelance", "Otros" },
                Datasets = new List<PieDataset<double>>
                {
                    new PieDataset<double>(new[] { 4000.0, 1500.0, 500.0 })
                    {
                        BackgroundColor = new[]
                        {
                            ColorUtil.ColorHexString(Colors.Green.Accent4),
                            ColorUtil.ColorHexString(Colors.Yellow.Default),
                            ColorUtil.ColorHexString(Colors.Grey.Darken1)
                        }
                    }
                }
            }
        };
    }

    private async Task AbrirModal(string titulo, string url)
    {
        var parameters = new DialogParameters { ["Url"] = url };
        await DialogService.Show<ModalTÃ©rminos>(titulo, parameters).Result;
    }
}
